/**
 * Cart v2 Session Fix Script
 * 
 * Este script garante consist√™ncia entre as sess√µes do carrinho adicionadas na API
 * e as sess√µes usadas para visualizar o carrinho. Ele deve resolver o problema de
 * produtos que s√£o adicionados com sucesso mas n√£o aparecem na p√°gina do carrinho.
 */
(function() {
  console.log('üîÑ Iniciando corre√ß√£o de sess√£o do carrinho v2...');
  
  // 1. Verificar e garantir ID de sess√£o consistente
  function ensureConsistentSessionId() {
    const currentSessionId = localStorage.getItem('cart_v2_session_id');
    
    if (!currentSessionId) {
      console.log('‚ö†Ô∏è Nenhum ID de sess√£o encontrado! Criando novo...');
      const newSessionId = `cart_v2_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      localStorage.setItem('cart_v2_session_id', newSessionId);
      console.log('‚úÖ Novo ID de sess√£o criado:', newSessionId);
      return newSessionId;
    }
    
    console.log('‚úì ID de sess√£o existente:', currentSessionId);
    return currentSessionId;
  }
  
  // 2. Realizar um teste b√°sico de carrinho
  async function testCartConnection(sessionId) {
    try {
      console.log('üîç Testando conex√£o com API do carrinho...');
      
      const response = await fetch('/api/v2/cart', {
        headers: {
          'Content-Type': 'application/json',
          'X-Cart-Session-Id': sessionId
        }
      });
      
      if (!response.ok) {
        throw new Error(`Erro na API: ${response.status}`);
      }
      
      const cartData = await response.json();
      console.log('‚úÖ Conex√£o com API do carrinho estabelecida!');
      console.log(`üìä Itens encontrados no carrinho: ${cartData.items?.length || 0}`);
      
      return {
        success: true,
        itemCount: cartData.items?.length || 0,
        items: cartData.items || []
      };
    } catch (error) {
      console.error('‚ùå Erro ao conectar com API do carrinho:', error);
      return { success: false, error: error.message };
    }
  }
  
  // 3. Adicionar um item de teste ao carrinho
  async function addTestItemIfEmpty(sessionId, currentItems) {
    // Se j√° existem itens, n√£o adiciona item de teste
    if (currentItems && currentItems.length > 0) {
      console.log('‚úÖ Carrinho j√° cont√©m itens. N√£o √© necess√°rio adicionar item de teste.');
      return { success: true, skipAdding: true };
    }
    
    try {
      console.log('üõí Adicionando item de teste ao carrinho...');
      
      const testProduct = {
        id: 'test-fix-' + Date.now(),
        name: 'Produto Teste (Corre√ß√£o)',
        price: 'R$ 1,00',
        image: null
      };
      
      const response = await fetch('/api/v2/cart', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Cart-Session-Id': sessionId
        },
        body: JSON.stringify({
          product: testProduct,
          quantity: 1
        })
      });
      
      if (!response.ok) {
        throw new Error(`Erro ao adicionar produto: ${response.status}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Item de teste adicionado com sucesso!');
      console.log(`üìä Itens no carrinho ap√≥s adi√ß√£o: ${result.items?.length || 0}`);
      
      return { success: true, addedItem: true, itemCount: result.items?.length || 0 };
    } catch (error) {
      console.error('‚ùå Erro ao adicionar item de teste:', error);
      return { success: false, error: error.message };
    }
  }

  // 4. Notificar o usu√°rio
  function notifyUser(message, isError = false) {
    // Criar elemento de notifica√ß√£o
    const notification = document.createElement('div');
    notification.style.position = 'fixed';
    notification.style.bottom = '20px';
    notification.style.right = '20px';
    notification.style.padding = '15px 20px';
    notification.style.borderRadius = '8px';
    notification.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
    notification.style.zIndex = '9999';
    notification.style.fontFamily = 'Arial, sans-serif';
    notification.style.fontSize = '14px';
    notification.style.transition = 'all 0.3s ease';
    
    // Aplicar cores com base no tipo
    if (isError) {
      notification.style.backgroundColor = '#FEE2E2';
      notification.style.color = '#B91C1C';
      notification.style.border = '1px solid #F87171';
      message = '‚ùå ' + message;
    } else {
      notification.style.backgroundColor = '#D1FAE5';
      notification.style.color = '#047857';
      notification.style.border = '1px solid #6EE7B7';
      message = '‚úÖ ' + message;
    }
    
    notification.textContent = message;
    
    // Adicionar ao body
    document.body.appendChild(notification);
    
    // Remover ap√≥s alguns segundos
    setTimeout(() => {
      notification.style.opacity = '0';
      setTimeout(() => {
        document.body.removeChild(notification);
      }, 300);
    }, 5000);
  }
  
  // Fun√ß√£o principal
  async function main() {
    // 1. Garantir consist√™ncia de sess√£o
    const sessionId = ensureConsistentSessionId();
    
    // 2. Testar conex√£o com a API
    const connectionTest = await testCartConnection(sessionId);
    
    if (!connectionTest.success) {
      notifyUser('N√£o foi poss√≠vel conectar ao carrinho. Atualize a p√°gina.', true);
      return;
    }
    
    // 3. Adicionar item de teste se necess√°rio
    if (connectionTest.itemCount === 0) {
      const addItemResult = await addTestItemIfEmpty(sessionId, connectionTest.items);
      
      if (!addItemResult.success) {
        notifyUser('Erro ao testar adi√ß√£o de produtos ao carrinho.', true);
        return;
      }
      
      if (addItemResult.addedItem) {
        notifyUser('Corre√ß√£o aplicada! Um item teste foi adicionado ao carrinho para verifica√ß√£o.');
      }
    } else {
      notifyUser(`Conex√£o com carrinho estabelecida. ${connectionTest.itemCount} produtos encontrados.`);
    }
    
    // 4. Informar que √© necess√°rio recarregar as p√°ginas para aplicar as corre√ß√µes
    console.log('‚ö†Ô∏è IMPORTANTE: Pode ser necess√°rio recarregar a p√°gina para ver os itens do carrinho.');
    console.log('üîÑ Corre√ß√£o de sess√£o do carrinho v2 conclu√≠da!');
  }
  
  // Executar script principal quando o documento estiver pronto
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', main);
  } else {
    main();
  }
})();
