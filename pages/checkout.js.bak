import { useState, useEffect, useMemo, useRef } from "react";
import { useRouter } from "next/router";
import Layout from "../src/components/Layout";
import CheckoutForm from "../src/components/checkout/CheckoutForm";
import GET_COUNTRIES from "../src/queries/get-countries";
import client from "../src/components/ApolloClient";
import { useAuth } from "../src/hooks/useAuth";
import Link from "next/link";
import Head from "next/head";
import LoginForm from "../src/components/auth/LoginForm";
import { useQuery } from "@apollo/client";
import { GET_CUSTOMER } from "../src/queries/customer";
import { useNotification } from '../src/components/ui/Notification';
import SEO from '../src/components/seo/SEO';
import { useCartContext } from '../src/contexts/CartContext';
import { formatPrice } from '../src/utils/format-price';

/**
 * P√°gina de checkout com verifica√ß√£o de autentica√ß√£o e op√ß√£o para checkout como convidado
 * Integra o fluxo de usu√°rios autenticados e n√£o autenticados com um estilo visual consistente com o carrinho
 */

// Componentes auxiliares (√çcones, etc.)
const Spinner = () => (
  <div className="inline-block w-4 h-4 border-2 border-gray-300 border-t-orange-500 rounded-full animate-spin"></div>
);

// √çcones simplificados
const ArrowIcon = () => <span>‚Üê</span>;
const LockIcon = () => <span>üîí</span>;
const UserIcon = () => <span>üë§</span>;
const HomeIcon = () => <span>üè†</span>;
const CheckIcon = () => <span className="text-green-500">‚úì</span>;
const CreditCardIcon = () => <span>üí≥</span>;
const RefreshIcon = () => <span>üîÑ</span>;

const Checkout = ({countriesData}) => {
	const router = useRouter();
	const { isLoggedIn, loading, user } = useAuth();
	const [checkoutMode, setCheckoutMode] = useState('initial'); // initial, guest, login
	const [isAnimating, setIsAnimating] = useState(false);
	const [isVerifyingAuth, setIsVerifyingAuth] = useState(false); // Novo estado para verifica√ß√£o
	const { notification } = useNotification();
	const notificationShown = useRef(false);
	
	// Buscar dados do cliente se estiver logado
	const { data: customerData, loading: customerLoading } = useQuery(GET_CUSTOMER, {
		skip: !isLoggedIn, // Pular a consulta se o usu√°rio n√£o estiver logado
		fetchPolicy: 'network-only', // Sempre buscar dados atualizados
		onCompleted: (data) => {
			console.log("[Checkout] Consulta GET_CUSTOMER completada:", data);
		},
		onError: (error) => {
			console.error("[Checkout] Erro na consulta GET_CUSTOMER:", error);
		}
	});
	
	// Combinar dados do usu√°rio autenticado com os dados do cliente da consulta GraphQL
	const combinedUserData = useMemo(() => {
		if (!isLoggedIn || !user) return null;
		
		// Combine os dados do contexto de autentica√ß√£o com os dados do cliente
		const combined = {
			...user,
			// Adicionar dados de endere√ßo do cliente se dispon√≠veis
			billing: customerData?.customer?.billing || undefined,
			shipping: customerData?.customer?.shipping || undefined
		};
		
		console.log("[Checkout] Dados do usu√°rio combinados:", combined);
		return combined;
	}, [isLoggedIn, user, customerData]);
		// Verificar se h√° itens no carrinho
	useEffect(() => {
		const cart = localStorage.getItem('woo-next-cart');
		if (!cart || JSON.parse(cart).length === 0) {
			notification.warning('Seu carrinho est√° vazio!');
			setTimeout(() => {
				router.push('/cart');
			}, 2000);
		}
	}, [router, notification]);
	
	// Fun√ß√£o para verificar status de autentica√ß√£o
	const verifyAuthStatus = async () => {
		setIsVerifyingAuth(true);
		try {
			// Verificar autentica√ß√£o novamente
			const response = await fetch('/api/auth/verify', { 
				method: 'GET',
				credentials: 'include',
				headers: { 'Cache-Control': 'no-cache' }
			});
			const data = await response.json();
			
			setIsVerifyingAuth(false);
			
			if (data.success && data.isLoggedIn) {
				console.log('Usu√°rio autenticado pela verifica√ß√£o manual');
				return true;
			} else {
				console.log('Usu√°rio n√£o autenticado pela verifica√ß√£o manual');
				return false;
			}
		} catch (error) {
			console.error('Erro ao verificar autentica√ß√£o:', error);
			setIsVerifyingAuth(false);
			return false;
		}
	};
		// Manipulador para login bem-sucedido
	const handleLoginSuccess = () => {
		// Ap√≥s o login bem-sucedido, vai automaticamente para o checkout
		setCheckoutMode('authenticated');
		notification.success('Login realizado com sucesso!');
	};
	
	// Ap√≥s carregamento, se o usu√°rio estiver logado, atualizar modo
	useEffect(() => {
		if (!loading && isLoggedIn) {
			setCheckoutMode('authenticated');
		}
	}, [loading, isLoggedIn]);
	// Exibi√ß√£o de mensagem de boas vindas
	useEffect(() => {
		if (!notificationShown.current && !loading) {
			if (isLoggedIn && user) {
				notification.success(`Bem-vindo(a) de volta, ${user.firstName || user.username || 'usu√°rio'}!`);
			} else if (checkoutMode === 'guest') {
				notification.info('Continuando como convidado. Voc√™ pode criar uma conta a qualquer momento.');
			}
			notificationShown.current = true;
		}
	}, [loading, user, notification, isLoggedIn, checkoutMode]);
	// Exibir estado de carregamento
	if (loading || customerLoading || isVerifyingAuth) {
		return (
			<Layout>
				<div className="container mx-auto my-16 px-4 xl:px-0">
					<div className="flex items-center justify-between mb-6">
						<div className="animate-pulse h-8 w-48 bg-gray-200 rounded"></div>
						<div className="animate-pulse h-6 w-32 bg-gray-200 rounded"></div>
					</div>
					
					<div className="flex flex-col lg:flex-row gap-6">
						<div className="lg:w-8/12">
							<div className="bg-white p-8 rounded-lg shadow-md">
								<div className="animate-pulse">
									<div className="flex items-center mb-8">
										<div className="rounded-full h-10 w-10 bg-gray-200 mr-3"></div>
										<div className="h-6 w-48 bg-gray-200 rounded"></div>
									</div>
									
									<div className="space-y-8">
										<div className="space-y-3">
											<div className="h-4 bg-gray-200 rounded w-1/3"></div>
											<div className="h-10 bg-gray-200 rounded w-full"></div>
										</div>
										
										<div className="space-y-3">
											<div className="h-4 bg-gray-200 rounded w-1/3"></div>
											<div className="h-10 bg-gray-200 rounded w-full"></div>
										</div>
										
										<div className="space-y-3">
											<div className="h-4 bg-gray-200 rounded w-1/4"></div>
											<div className="h-10 bg-gray-200 rounded w-full"></div>
										</div>
									</div>
									
									<div className="mt-12 flex items-center justify-center">
										<Spinner />
										<span className="ml-3 text-gray-600">Carregando suas informa√ß√µes...</span>
									</div>
								</div>
							</div>
						</div>
						
						<div className="lg:w-4/12">
							<div className="bg-white p-6 rounded-lg shadow-md">
								<div className="animate-pulse">
									<div className="h-5 bg-gray-200 rounded w-1/2 mb-6"></div>
									
									<div className="space-y-4">
										<div className="flex justify-between">
											<div className="h-4 bg-gray-200 rounded w-20"></div>
											<div className="h-4 bg-gray-200 rounded w-16"></div>
										</div>
										
										<div className="flex justify-between">
											<div className="h-4 bg-gray-200 rounded w-16"></div>
											<div className="h-4 bg-gray-200 rounded w-12"></div>
										</div>
										
										<div className="pt-4 flex justify-between">
											<div className="h-5 bg-gray-200 rounded w-16"></div>
											<div className="h-6 bg-gray-200 rounded w-24"></div>
										</div>
									</div>
									
									<div className="mt-8 space-y-4">
										<div className="h-24 bg-gray-100 rounded"></div>
										<div className="h-24 bg-gray-100 rounded"></div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</Layout>
		);
	}
		// Renderizar a tela de op√ß√µes de checkout para usu√°rios n√£o logados
	if (!isLoggedIn && checkoutMode === 'initial') {
		return (
			<Layout>
				<Head>
					<title>Checkout - Xiaomi Brasil</title>
				</Head>
				<div className="container mx-auto my-16 px-4 xl:px-0">				<div className="flex items-center justify-between mb-6">
					<h1 className="text-2xl font-bold">Checkout</h1>
					<Link href="/cart">
						<a className="flex items-center text-gray-600 hover:text-orange-600 transition-colors">
							<ArrowIcon /> <span className="ml-1">Voltar para o carrinho</span>
						</a>
					</Link>
				</div>
					
					<div className="bg-white p-6 rounded-lg shadow-md mb-8">
						<div className="flex items-center mb-6 pb-4 border-b border-gray-100">
							<div className="bg-orange-100 rounded-full p-2 mr-3">
								<UserIcon />
							</div>
							<h2 className="text-xl font-semibold">Escolha como deseja continuar</h2>
						</div>
						
						<div className="grid md:grid-cols-2 gap-6">
							<div className="border p-6 rounded-lg hover:border-orange-500 transition-colors hover:shadow-md">
								<h3 className="font-medium text-lg mb-2 flex items-center">
									<LockIcon /> <span className="ml-2">J√° tem uma conta?</span>
								</h3>
								<p className="text-gray-600 mb-4">
									Fa√ßa login para acessar seus endere√ßos salvos e finalizar sua compra mais rapidamente.
								</p>
								<button 
									onClick={() => {
										setCheckoutMode('login');
										setTimeout(() => {
											notification.info('Por favor, fa√ßa login para continuar');
										}, 300);
									}}
									className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700 transition-colors w-full flex items-center justify-center"
								>
									<span>Fazer login</span>
								</button>
							</div>
							
							<div className="border p-6 rounded-lg hover:border-orange-500 transition-colors hover:shadow-md">
								<h3 className="font-medium text-lg mb-2 flex items-center">
									<UserIcon /> <span className="ml-2">Novo por aqui?</span>
								</h3>
								<p className="text-gray-600 mb-4">
									Crie uma conta para acompanhar pedidos, salvar endere√ßos e obter vantagens exclusivas.
								</p>								<Link href={`/registro?redirect=${encodeURIComponent('/checkout')}`}>
									<a className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700 transition-colors block text-center">
										Criar conta
									</a>
								</Link>
							</div>
						</div>
						
						<div className="mt-8 pt-6 border-t">
							<button
								onClick={() => {
									setCheckoutMode('guest');
									setTimeout(() => {
										notification.info('Continuando como convidado');
									}, 300);
								}}
								className="border border-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-50 transition-colors w-full flex items-center justify-center"
							>
								<span>Continuar como convidado</span>
							</button>
						</div>
						
						<div className="mt-6 text-xs text-gray-500 bg-gray-50 p-3 rounded">
							<p className="flex items-center">
								<LockIcon /> <span className="ml-2">Suas informa√ß√µes est√£o seguras e protegidas</span>
							</p>
						</div>
					</div>
				</div>
			</Layout>
		);
	}
		// Mostrar formul√°rio de login
	if (checkoutMode === 'login') {
		return (
			<Layout>
				<Head>
					<title>Login para Checkout - Xiaomi Brasil</title>
				</Head>
				<div className="container mx-auto my-16 px-4 xl:px-0">
					<div className="flex items-center justify-between mb-6">
						<h1 className="text-2xl font-bold">Login para Checkout</h1>
						<button 
							onClick={() => setCheckoutMode('initial')}
							className="flex items-center text-gray-600 hover:text-orange-600 transition-colors"
						>
							<ArrowIcon /> <span className="ml-1">Voltar para op√ß√µes</span>
						</button>
					</div>
					
					<div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow-md">
						<div className="flex items-center mb-4 pb-3 border-b border-gray-100">
							<div className="bg-orange-100 rounded-full p-2 mr-3">
								<LockIcon />
							</div>
							<h2 className="text-lg font-medium">Entre com sua conta</h2>
						</div>
						
						<LoginForm 
							onSuccess={handleLoginSuccess}
							redirectTo={null} // N√£o redirecionar, vamos atualizar o estado local
						/>
						
						<div className="mt-6 text-center">
							<button
								onClick={() => setCheckoutMode('initial')}
								className="text-gray-600 hover:text-orange-600 transition-colors inline-flex items-center"
							>
								<ArrowIcon /> <span className="ml-1">Voltar para op√ß√µes de checkout</span>
							</button>
						</div>
					</div>
					
					<div className="max-w-md mx-auto mt-4 bg-gray-50 p-4 rounded-lg text-sm text-gray-600">
						<p className="flex items-center">
							<span className="mr-2">üí°</span>
							<span>Ao fazer login, voc√™ poder√° usar seus endere√ßos salvos e acompanhar seus pedidos facilmente.</span>
						</p>
					</div>
				</div>
			</Layout>
		);
	}
	// Mostrar o formul√°rio de checkout para usu√°rios autenticados ou convidados
	return (
		<Layout>
			<Head>
				<title>Finalizar Pedido - Xiaomi Brasil</title>
				<meta name="description" content="Finalize sua compra com seguran√ßa na Xiaomi Brasil" />
			</Head>
			
			<SEO title="Finalizar Pedido" description="Complete sua compra com seguran√ßa e rapidez na Xiaomi Brasil" />
			
			<div className="checkout container mx-auto my-10 px-4 xl:px-0">
				{/* Header do checkout com breadcrumb e retorno para carrinho */}
				<div className="wd-checkout-header flex flex-wrap items-center justify-between mb-8">
					<div className="left">
						<h1 className="text-2xl md:text-3xl font-bold text-gray-900">Finalizar Pedido</h1>
						<div className="breadcrumb text-sm text-gray-500 mt-1">
							<Link href="/">
								<a className="hover:text-orange-500">Home</a>
							</Link> &gt; 
							<Link href="/cart">
								<a className="hover:text-orange-500"> Carrinho</a>
							</Link> &gt; 
							<span className="font-medium text-orange-500"> Checkout</span>
						</div>
					</div>
					
					<Link href="/cart">
						<a className="flex items-center mt-4 md:mt-0 text-gray-700 hover:text-orange-600 transition-colors bg-gray-100 hover:bg-gray-200 px-3 py-2 rounded">
							<ArrowIcon /> <span className="ml-2">Voltar para o carrinho</span>
						</a>
					</Link>
				</div>
				
				{/* Status de autentica√ß√£o */}
				{isLoggedIn ? (
					<div className="mb-6 bg-green-50 border-l-4 border-green-500 p-4 rounded-r-md shadow-sm">
						<div className="flex items-center">
							<div className="mr-3 text-green-500 bg-green-100 p-1 rounded-full">
								<CheckIcon />
							</div>
							<div>
								<p className="text-green-700">
									Ol√°, <span className="font-semibold">{user?.firstName || 'usu√°rio'}</span>!
								</p>
								<p className="text-sm text-green-600">Voc√™ est√° logado e pode usar seus endere√ßos salvos.</p>
							</div>
						</div>
					</div>
				) : (
					<div className="mb-6 bg-gray-50 border-l-4 border-gray-400 p-4 rounded-r-md shadow-sm">
						<div className="flex justify-between items-center">
							<div className="flex items-center">
								<div className="mr-3 text-gray-500 bg-gray-200 p-1 rounded-full">
									<UserIcon />
								</div>
								<div>
									<p className="text-gray-700">Voc√™ est√° finalizando como convidado</p>
									<p className="text-sm text-gray-500">Crie uma conta para acompanhar seus pedidos</p>
								</div>
							</div>
							<button 
								onClick={() => {
									setCheckoutMode('initial');
									setTimeout(() => {
										notification.info('Selecione uma op√ß√£o de checkout');
									}, 300);
								}}
								className="bg-white border border-gray-300 text-orange-600 hover:bg-gray-50 px-3 py-2 rounded text-sm flex items-center"
							>
								<span>Alterar</span>
							</button>
						</div>
					</div>
				)}
				
				<div className="flex flex-col lg:flex-row gap-6">
					{/* Formul√°rio principal */}
					<div className="lg:w-8/12">
						<div className="bg-white rounded-lg shadow-md p-6 mb-6">
							<div className="flex items-center mb-6 pb-3 border-b border-gray-100">
								<div className="bg-orange-100 rounded-full p-2 mr-3">
									<CreditCardIcon />
								</div>
								<h2 className="text-xl font-semibold">Informa√ß√µes para entrega e pagamento</h2>
							</div>
							
							<CheckoutForm 
								countriesData={countriesData} 
								isUserLoggedIn={isLoggedIn}
								userData={combinedUserData}
							/>
						</div>
					</div>
					
					{/* Sidebar com resumo e garantias */}
					<div className="lg:w-4/12">
						<div className="bg-white rounded-lg shadow-md p-6 sticky top-4">
							<h3 className="text-lg font-semibold mb-4 pb-2 border-b border-gray-100">Resumo da Compra</h3>
							
							<div className="space-y-4 mb-6">
								{/* Valores a serem apresentados dinamicamente */}
								<div className="flex justify-between text-gray-700">
									<span>Subtotal:</span>
									<span className="font-medium">-</span>
								</div>
								
								<div className="flex justify-between text-gray-700">
									<span>Frete:</span>
									<span className="font-medium">-</span>
								</div>
								
								<div className="flex justify-between border-t border-gray-100 pt-4">
									<span className="font-medium">Total:</span>
									<span className="font-bold text-orange-500 text-lg">-</span>
								</div>
							</div>
							
							{/* Informa√ß√µes de seguran√ßa e garantias */}
							<div className="grid grid-cols-1 gap-4 mt-6 pt-4 border-t border-dashed">
								<div className="bg-gray-50 p-3 rounded-lg shadow-sm">
									<h3 className="font-medium mb-2 flex items-center">
										<LockIcon /> <span className="ml-2">Pagamento Seguro</span>
									</h3>
									<p className="text-sm text-gray-600">Todas as transa√ß√µes s√£o criptografadas e seus dados est√£o protegidos.</p>
								</div>
								
								<div className="bg-gray-50 p-3 rounded-lg shadow-sm">
									<h3 className="font-medium mb-2 flex items-center">
										<HomeIcon /> <span className="ml-2">Entrega Confi√°vel</span>
									</h3>
									<p className="text-sm text-gray-600">Acompanhe seu pedido a qualquer momento ap√≥s a finaliza√ß√£o da compra.</p>
								</div>
								
								<div className="bg-gray-50 p-3 rounded-lg shadow-sm">
									<h3 className="font-medium mb-2 flex items-center">
										<RefreshIcon /> <span className="ml-2">Garantia Xiaomi</span>
									</h3>
									<p className="text-sm text-gray-600">Todos os produtos possuem garantia oficial da Xiaomi Brasil.</p>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</Layout>
	);
}

export default Checkout;

export async function getStaticProps() {
	const { data } = await client.query({
		query: GET_COUNTRIES
	});

	return {
		props: {
			countriesData: data?.countries || []
		},
		revalidate: 600,
	};
}
