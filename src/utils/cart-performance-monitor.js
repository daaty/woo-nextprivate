/**
 * Cart Performance Monitoring
 * 
 * Este arquivo implementa um sistema de monitoramento de performance para detectar
 * problemas como o de 21 segundos para adicionar um item ao carrinho.
 * 
 * Recursos:
 * 1. Registro de tempo de todas as opera√ß√µes do carrinho
 * 2. Detectar opera√ß√µes lentas (>3s)
 * 3. Log de m√©tricas para an√°lise posterior
 * 4. Toggle autom√°tico para endpoint r√°pido/lento baseado em performance
 */

import { v4 as uuidv4 } from 'uuid';

// Configura√ß√µes
const PERFORMANCE_THRESHOLD = {
  FAST: 1000,     // Opera√ß√µes r√°pidas: <1s
  ACCEPTABLE: 3000, // Opera√ß√µes aceit√°veis: 1-3s
  SLOW: 5000,     // Opera√ß√µes lentas: 3-5s
  CRITICAL: 10000  // Opera√ß√µes cr√≠ticas: >10s
};

class CartPerformanceMonitor {
  constructor() {
    this.metrics = {
      operations: [],
      lastOperation: null,
      averageAddToCartTime: 0,
      averageCartUpdateTime: 0,
      averageCartRemoveTime: 0,
      totalOperations: 0,
      slowOperations: 0,
      criticalOperations: 0
    };
    
    this.lastEndpointSwitch = Date.now();
    this.currentEndpoint = 'fast'; // Default value
    
    // Check if we're in browser environment before accessing localStorage
    if (typeof window !== 'undefined') {
      this.currentEndpoint = localStorage.getItem('cart_endpoint') || 'fast';
      
      // Inicializar com dados salvos se dispon√≠veis
      this.loadMetrics();
    }
  }
  
  /**
   * Iniciar medi√ß√£o de tempo para opera√ß√£o
   */
  startMeasurement(operation, productId = null) {
    const operationId = uuidv4();
    const startTime = Date.now();
    
    console.log(`üïí [CartPerformance] Iniciando medi√ß√£o: ${operation}${productId ? ` (produto ${productId})` : ''}`);
    
    return { operationId, startTime, operation, productId };
  }
  
  /**
   * Finalizar medi√ß√£o e registrar m√©trica
   */
  endMeasurement(measurement, success = true, errorDetails = null) {
    const { operationId, startTime, operation, productId } = measurement;
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    // Registrar opera√ß√£o
    const operationData = {
      id: operationId,
      operation,
      productId,
      startTime,
      endTime,
      duration,
      success,
      errorDetails,
      timestamp: new Date().toISOString(),
      performanceCategory: this.categorizePerformance(duration)
    };
    
    // Adicionar aos logs
    this.metrics.operations.push(operationData);
    this.metrics.lastOperation = operationData;
    this.metrics.totalOperations++;
    
    // Atualizar m√©dias
    this.updateAverages(operation, duration);
    
    // Registrar opera√ß√µes lentas
    if (duration > PERFORMANCE_THRESHOLD.SLOW) {
      this.metrics.slowOperations++;
      console.warn(`‚ö†Ô∏è [CartPerformance] Opera√ß√£o lenta detectada: ${operation} levou ${duration}ms`);
    }
    
    if (duration > PERFORMANCE_THRESHOLD.CRITICAL) {
      this.metrics.criticalOperations++;
      console.error(`üö® [CartPerformance] Opera√ß√£o CR√çTICA detectada: ${operation} levou ${duration}ms`);
      
      // Mudar endpoint se tiver problema cr√≠tico com o atual
      this.evaluateEndpointSwitch(operationData);
    }
    
    // Registrar no console
    const performanceEmoji = this.getPerformanceEmoji(operationData.performanceCategory);
    console.log(`${performanceEmoji} [CartPerformance] ${operation} completada em ${duration}ms`);
    
    // Salvar m√©tricas
    this.saveMetrics();
    
    return operationData;
  }
  
  /**
   * Categorizar performance baseado no tempo
   */
  categorizePerformance(duration) {
    if (duration <= PERFORMANCE_THRESHOLD.FAST) return 'FAST';
    if (duration <= PERFORMANCE_THRESHOLD.ACCEPTABLE) return 'ACCEPTABLE';
    if (duration <= PERFORMANCE_THRESHOLD.SLOW) return 'SLOW';
    return 'CRITICAL';
  }
  
  /**
   * Obter emoji para categoria de performance
   */
  getPerformanceEmoji(category) {
    switch(category) {
      case 'FAST': return 'üü¢';
      case 'ACCEPTABLE': return 'üü°';
      case 'SLOW': return 'üü†';
      case 'CRITICAL': return 'üî¥';
      default: return '‚ö™';
    }
  }
  
  /**
   * Atualizar m√©dias de tempo por tipo de opera√ß√£o
   */
  updateAverages(operation, duration) {
    const opType = operation.toLowerCase();
    
    if (opType.includes('add')) {
      this.updateAverage('averageAddToCartTime', duration);
    } else if (opType.includes('update')) {
      this.updateAverage('averageCartUpdateTime', duration);
    } else if (opType.includes('remove')) {
      this.updateAverage('averageCartRemoveTime', duration);
    }
  }
  
  /**
   * Atualizar um valor m√©dio espec√≠fico
   */
  updateAverage(metricName, newValue) {
    // Se for primeira opera√ß√£o, usar valor direto
    if (!this.metrics[metricName]) {
      this.metrics[metricName] = newValue;
      return;
    }
    
    // Atualizar m√©dia ponderada
    this.metrics[metricName] = (this.metrics[metricName] * 0.7) + (newValue * 0.3);
  }
  /**
   * Decidir se deve mudar entre endpoints r√°pido/padr√£o
   */
  evaluateEndpointSwitch(operationData) {
    const now = Date.now();
    
    // Verificar se estamos no navegador
    if (typeof window === 'undefined') {
      console.log('‚ö†Ô∏è [CartPerformance] Ignorando avalia√ß√£o de endpoint no ambiente servidor');
      return;
    }
    
    // N√£o mudar mais frequente que a cada 5 minutos
    if (now - this.lastEndpointSwitch < 300000) {
      return;
    }
    
    // Se endpoint atual √© 'fast' e temos problema cr√≠tico, tentar padr√£o
    if (this.currentEndpoint === 'fast' && operationData.performanceCategory === 'CRITICAL') {
      console.log('üîÑ [CartPerformance] Mudando para endpoint padr√£o ap√≥s problema cr√≠tico');
      localStorage.setItem('disable_fast_cart', 'true');
      this.currentEndpoint = 'standard';
      this.lastEndpointSwitch = now;
    } 
    // Se endpoint atual √© padr√£o e temos problema cr√≠tico, tentar r√°pido
    else if (this.currentEndpoint === 'standard' && operationData.performanceCategory === 'CRITICAL') {
      console.log('üîÑ [CartPerformance] Mudando para endpoint r√°pido ap√≥s problema cr√≠tico');
      localStorage.removeItem('disable_fast_cart');
      this.currentEndpoint = 'fast';
      this.lastEndpointSwitch = now;
    }
    
    localStorage.setItem('cart_endpoint', this.currentEndpoint);
  }
  
  /**
   * Salvar m√©tricas em localStorage para persist√™ncia
   */
  saveMetrics() {
    const metricsToSave = {
      ...this.metrics,
      // Limitar opera√ß√µes para n√£o sobrecarregar o localStorage
      operations: this.metrics.operations.slice(-30)
    };
    
    // Salvar em localStorage
    if (typeof window !== 'undefined') {
      localStorage.setItem('cart_performance_metrics', JSON.stringify(metricsToSave));
    }
  }
  
  /**
   * Carregar m√©tricas do localStorage
   */
  loadMetrics() {
    if (typeof window !== 'undefined') {
      const savedMetrics = localStorage.getItem('cart_performance_metrics');
      if (savedMetrics) {
        try {
          const parsed = JSON.parse(savedMetrics);
          this.metrics = {
            ...this.metrics,
            ...parsed
          };
          console.log('üìä [CartPerformance] M√©tricas carregadas do localStorage');
        } catch (e) {
          console.error('‚ùå [CartPerformance] Erro ao carregar m√©tricas:', e);
        }
      }
    }
  }
  
  /**
   * Obter relat√≥rio de performance
   */
  getPerformanceReport() {
    const { totalOperations, slowOperations, criticalOperations } = this.metrics;
    
    return {
      ...this.metrics,
      currentEndpoint: this.currentEndpoint,
      healthScore: this.calculateHealthScore(),
      slowPercentage: totalOperations ? (slowOperations / totalOperations) * 100 : 0,
      criticalPercentage: totalOperations ? (criticalOperations / totalOperations) * 100 : 0,
      timestamp: new Date().toISOString()
    };
  }
  
  /**
   * Calcular pontua√ß√£o de sa√∫de do carrinho (0-100)
   */
  calculateHealthScore() {
    const { totalOperations, slowOperations, criticalOperations, 
      averageAddToCartTime, averageCartUpdateTime } = this.metrics;
    
    if (totalOperations === 0) return 100;
    
    // Fator de opera√ß√µes lentas
    const slowFactor = 1 - ((slowOperations / totalOperations) * 0.5);
    
    // Fator de opera√ß√µes cr√≠ticas (impacto maior)
    const criticalFactor = 1 - ((criticalOperations / totalOperations) * 0.8);
    
    // Fator de tempo m√©dia de addToCart (penalidade se >5s)
    const addTimeFactor = averageAddToCartTime > 5000 
      ? 1 - ((averageAddToCartTime - 5000) / 20000)
      : 1;
    
    // Fator de tempo de atualiza√ß√£o (penalidade se >3s)
    const updateTimeFactor = averageCartUpdateTime > 3000
      ? 1 - ((averageCartUpdateTime - 3000) / 10000)
      : 1;
    
    // Calcular score ponderado
    let score = (slowFactor * 0.25) + (criticalFactor * 0.35) + 
                (addTimeFactor * 0.25) + (updateTimeFactor * 0.15);
    
    // Normalizar entre 0-100
    score = Math.max(0, Math.min(1, score)) * 100;
    
    return Math.round(score);
  }
  
  /**
   * Limpar m√©tricas (manter apenas configura√ß√µes)
   */
  resetMetrics() {
    this.metrics = {
      operations: [],
      lastOperation: null,
      averageAddToCartTime: 0,
      averageCartUpdateTime: 0,
      averageCartRemoveTime: 0,
      totalOperations: 0,
      slowOperations: 0,
      criticalOperations: 0
    };
    
    this.saveMetrics();
    console.log('üßπ [CartPerformance] M√©tricas resetadas');
  }
}

// Criar inst√¢ncia singleton
const cartPerformanceMonitor = new CartPerformanceMonitor();
export default cartPerformanceMonitor;
