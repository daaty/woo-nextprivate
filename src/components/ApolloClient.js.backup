import fetch from 'node-fetch';
import { ApolloClient, ApolloLink, InMemoryCache, createHttpLink } from "@apollo/client";

/**
 * Middleware operation
 * If we have a session token in localStorage, add it to the GraphQL request as a Session header.
 */
export const middleware = new ApolloLink((operation, forward) => {
  /**
   * If session data exist in local storage, set value as session header.
   */
  const session = (typeof window !== 'undefined') ? localStorage.getItem("woo-session") : null;

  if (session) {
    operation.setContext(({ headers = {} }) => ({
      headers: {
        ...headers,
        "woocommerce-session": `Session ${session}`
      }
    }));
  }

  return forward(operation);
});

/**
 * Afterware operation.
 *
 * This catches the incoming session token and stores it in localStorage, for future GraphQL requests.
 */
export const afterware = new ApolloLink((operation, forward) => {
  return forward(operation).map(response => {
    if (typeof window === 'undefined') {
      return response;
    }

    /**
     * Check for session header and update session in local storage accordingly.
     */
    const context = operation.getContext();
    const { response: { headers } } = context;
    const session = headers.get("woocommerce-session");

    if (session) {
      // Remove session data if session destroyed.
      if ("false" === session) {
        localStorage.removeItem("woo-session");
      } 
      // Update session new data if changed.
      else if (localStorage.getItem("woo-session") !== session) {
        localStorage.setItem("woo-session", headers.get("woocommerce-session"));
        console.log("üîê Sess√£o WooCommerce atualizada:", headers.get("woocommerce-session"));
      }
    }

    return response;
  });
});

// Cria um link HTTP com as configura√ß√µes corretas
const httpLink = createHttpLink({
  uri: typeof window === 'undefined'
    ? 'https://rota.rotadoscelulares.com/graphql' // Use direct URL for server-side
    : '/api/graphql', // Use API route for client-side to avoid CORS
  fetch: fetch,
  credentials: 'same-origin',
  fetchOptions: {
    mode: 'cors'
  },
});

// Apollo GraphQL client.
const client = new ApolloClient({
  link: middleware.concat(afterware.concat(httpLink)),
  cache: new InMemoryCache(),
  defaultOptions: {
    watchQuery: {
      fetchPolicy: 'network-only',
      errorPolicy: 'all',
    },
    query: {
      fetchPolicy: 'network-only',
      errorPolicy: 'all',
    },
    mutate: {
      fetchPolicy: 'no-cache', // Importante para muta√ß√µes
      errorPolicy: 'all',
    },
  },
  connectToDevTools: process.env.NODE_ENV === 'development', // Ferramentas de desenvolvimento Apollo para debug
});

export default client;
